What happens when you initialize a repository? Why do you need to do it?

Creates a hidden folder that will keep all our controlled versions.
No version control until git is actually initialized in that directory.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

Staging area is where we put all files concerned by that "logical change" we want
to make in our commit. WD is the physical directory with all the files on disk.
Repository is all files and their versions

How can you use the staging area to make sure you have one commit per logical change?
Only add concerned files to the staging area. Work on them. Commit. Repeat with
different logical change on new staging area.

What are some situations when branches would be helpful in keeping your history organized?
How would branches help?

Working on different versions of the project (easy mode, international), or doing
some experimental work, or for compatibility reasons have 2 versions of the project
at the same time (like iOS7 and iOS10)

How do the diagrams help you visualize the branch structure?

Commit history is not single lined, and is not linear. There can be multiple branches
at the same time. Visualizing them helps get where we are right now.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
It merges all changes from merging branches to the currently checked out branch.
The new branch now has access to both histories.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Auto handles most of the easy cases automatically. But Git doesn't understand code,
so if something "looks" different, it will raise a conflict. Sometimes it's not really
necessary.
